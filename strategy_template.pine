//@version=3

// BEGIN UNCOMMENT FOR BACKTESTING
strategy(title="Strategy Template", shorttitle="STRAT-TMPLT", overlay=true, 
         pyramiding=0, default_qty_value=100, commission_value=0.1, commission_type=strategy.commission.percent, initial_capital=1000)
strategyEntry(name, direction, myCondition) =>
    if direction==1 and name=="Long"
        strategy.entry("Long", 1, when= myCondition)
    if direction==0 and name=="Short"
        strategy.entry("Short", 0, when= myCondition)
strategyClose(name, myCondition) =>
    if name=="Long"
        strategy.close("Long", when= myCondition)
    if name=="Short"
        strategy.close("Short", when= myCondition)
isStrategy = true, isStudy = false
// END UNCOMMENT FOR BACKTESTING

// BEGIN UNCOMMENT FOR ALERTS
// study(title="[Autoview][Alerts] Simple Template 1.0", shorttitle="[AL] Simple Template 1.0", overlay=true)
// strategyEntry(RUNNING, AS, STUDY) =>   RUNNING=='false' ? false : false 
// strategyClose(ALERTS, NOT_STRATEGY) => ALERTS== 'false' ? false : false
// isStrategy = false, isStudy = true
// END UNCOMMENT FOR ALERTS

//  Name: Simple Template 1.0
//  Author:   MrBit (yatrader2)
//  Based on work by: JustUncleL and CryptoRox
//  Revision: R0.01
//  Date:     11-Jun-2018
//
//  Description:
//  ============
//
//  This crossover strategy is just a place holder.
//  This is really just a template for you to build your own strategy for backtesting.
//  And then to run with autoview.
//
//  I included the crossover strategy so it would work out of the box and you'd
//  have simple example code to modify.
//
//  It does however provide a lot of flexibilty for what you build, and it is
//  very easy to switch between Strategy and Alerts. You can completely switch
//  between Strategy and Alerts with a single Comment / Uncomment of the blocks
//  at the top of the script and have confidence that the script will run the same
//  in both states.
//
//  Other than that you should only need to edit code in the section:
//  between // BEGIN ACTUAL STRATEGY and // END ACTUAL STRATEGY
//
//  It supports Renko and HA candles (please take care with both to understand
//  what you are actually backtesting). See notes below.
//
//  It supports Multiple Timeframes (via a multiplier)
//
//  it can be long only short only or both. You can specify different
//  Long Close and Short Open (and Short Close / Long Open) conditions
//  or let them be the same.
//
//  In fact you define your whole strategy by just setting those 4 variables.
//
// You can set specific time periods to backtest (or to run the alerts)
//
//  Support for various stops:
//   - Trailing Stop, with Activate Level (as % of price) and Trailing Stop (as % of price)
//   - Target Profit Level, (as % of price)
//   - Stop Loss Level, (as % of price)
//
//  You can monitor real or hypothetical trades (and stops)
//   - BUY green triangles and SELL dark red triangles
//   - Trade Order closed colour coded Label:
//       > Dark Red = Stop Loss Hit
//       > Green  = Target Profit Hit
//       > Purple = Trailing Stop Hit
//       > Orange = Opposite (Sell) Order Close
//   - Trailing Stop Activate Price = Blue dotted line
//   - Trailing Stop Price =  Fuschia solid stepping line
//   - Target Profit Price = Lime '+' line
//   - Stop Loss Price = Red '+' line
//
//
//  References:
//  ===========
//  - Original script was MA Ribbon R0.13 by JustUncleL
//
//  Dealing With Renko Charts:
//  --------------------------
//  - If you choose to use Renko charts, make sure you have enabled the "IS This a RENKO Chart"
//    option.
//  - If you want non-repainting Renko charts you MUST use TRADITIONAL Renko Bricks. This
//    type of brick is fixed and will not change size.
//  - Also use Renko bricks with WICKS DISABLED. Wicks are not part of Renko, the whole
//    idea of using Renko bricks is not to see the wick noise.
//
//  Working with HA Candles:
//  ------------------------
//  Regardless of what you display on your chart HA or traditional Candlesticks
//  the dafaults of this are set to use the tradional candlestick values to save you
//  from bogus HA backtests.
//  HOWEVER
//  Regardless of what you display on your chart HA or traditional Candlesticks, you
//  may run a startegy (or a backtest, but why?) on HA values by selecting:
//  "Use Heikin-Ashi Candles".
//
//  Revisions:
//  ==========
//  R0.13B  - [MrBit] Branch from JustUncleL R0.13
//            > Remove actual algo
//            > Establish functions for long Signal, long Close Signal
//              and short Signal, short Close Signal to minimize the places code
//              must be editted to update / replace algos
//            > Make allow Long and allow short and invert trade directions
//              independent options
//            > Added support for alternate candle types
//            > Added autoset backtest period feature, and optional coloring
//            > Moved strategy calls in to functions so they can all be comment
//              out or activated / disabled in  a single block at the top of the script
//  R1.00  - Extensive Clean up and bug fixes
//           > Enabled testPeriod to be used to limit Alerts too
//           > You can completely switch between Strategy and Alerts with a single
//             Comment / Uncomment of the blocks at the top
//           > Added a trivial strategy so it works out of the box.
//           > Renamed to Simple Template 1.00
//
//  TODO:   Scaling / Pyramding
//
//
// -----------------------------------------------------------------------------
// Copyright 2018 JustUncleL, MrBit (yatrader2)
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// The GNU General Public License can be found here
// <http://www.gnu.org/licenses/>.
//
// -----------------------------------------------------------------------------
//

//////////////////////////////////////////////////////////////////////////////////////////
// INPUTS

useRenko   = input(false, title="This a RENKO Chart?")
// WARNING: Using Heikin-Ashi may result in inaccurate backtest results
useHeikin  = input(false, title="Use Heikin-Ashi Candles? (BT WILL BE UNRELIABLE)")
// Use Alternate Anchor TF for MAs 
anchor = input(0,minval=0,maxval=1440,title="Alternate TimeFrame Multiplier (0=none)")
// If have anchor specified, calculate the base multiplier.
//mult  = isintraday ? anchor==0 or interval<=0 or interval>=anchor or anchor>1440? 1 : round(anchor/interval) : 1
//mult := isdwm?  1 : mult  // Only available Daily or less
mult = anchor>0 ? anchor : 1 
open_  = useHeikin ? security(heikinashi(tickerid), period, open) : security(tickerid, period, open)
close_ = useHeikin ? security(heikinashi(tickerid), period, close) : security(tickerid, period, close)
high_  = useRenko? max(close_,open_) : useHeikin ? security(heikinashi(tickerid), period, high) : security(tickerid, period, high)
low_   = useRenko? min(close_,open_) : useHeikin ? security(heikinashi(tickerid), period, low) :  security(tickerid, period, low)
uPrice = input(title="Price", defval="close", options=["close", "high", "low"])
src= uPrice=="close" ? close_ : uPrice=="high" ? high_ : uPrice=="low" ? low_ : na
// This is superced by the design of specifying Open and Close setting in strategy
// fastExit  = input(false,title="Use Opposite Trade as a Close Signal")
fastExit = false
isLong = input(true,title="Allow Longs")
isShort = input(true,title="Allow Shorts")
flipTrade = input(false,title="Flip/Invert Strategy")
clrBars   = input(false,title="Colour Candles to Trade Order state")

// CONSTANTS
AQUA = #00FFFFFF
BLUE = #0000FFFF
RED  = #FF0000FF
LIME = #00FF00FF
GRAY = #808080FF
DARKRED   = #8B0000FF
DARKGREEN = #006400FF

//////////////////////////////////////////////////////////////////////////////////////////
// BEGIN ACTUAL STRATEGY

// Strategy specific inputs
quick = input(14, title="Quick Period", step=1, minval=1) 
slow = input(28, title="Slow Period", step=1, minval=1) 

// UPDATE WITH ACTUAL STRATEGY HERE

openLong   =  crossover(sma(src, quick*mult), sma(src, slow*mult))
closeLong  =  crossunder(sma(src, quick*mult), sma(src, slow*mult)) 

openShort  = closeLong
closeShort = openLong

// END ACTUAL STRATEGY
//////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////
//* Period selector for backtesting and optionally alerts

// A switch to control background coloring of the test period
testPeriodforAlerts = input(title="Limit Alerts to Test Period", type=bool, defval=false)
testPeriodBackground = input(title="Color Test Period?", type=bool, defval=false)

// Autoset Backtest Period
autolen = input(title="Auto set backtest Start", defval=true)
custom_candle_start = 0
timecondition_hourly = n > round(76.5633 * pow((interval / 60), 2) - 1745.19 * (interval / 60) + 10649)
timecondition_daily = n > round(1000 / interval) // Only for bitcoin, need a separate quadratic fit for other securities
autolen_timePeriod = autolen ? (interval >= 60 and interval <= 720 and timecondition_hourly) or (interval < 60 and timecondition_daily) : false
    
// Or set a specifc period
testStartMonth = input(1, "Backtest Start Month",minval=1,maxval=12)
testStartYear = input(2019, "Backtest Start Year",minval=1980)
// testStartDay = input(1, "Backtest Start Day",minval=1,maxval=31)
testStartDay = 1
testPeriodStart = timestamp(testStartYear,testStartMonth,testStartDay,0,0)

testStopMonth = input(title="Backtest Stop Month", type=integer, defval=12, step=1, minval=1, maxval=12)
testStopYear = input(title="Backtest Stop Year", type=integer, defval=2019, step=1, minval=2013, maxval=2020)
//testStopDay = input(title="Backtest Stop Day", type=integer, defval=31, step=1, minval=1, maxval=31)
testStopDay=31
testPeriodStop = timestamp(testStopYear,testStopMonth,testStopDay,0,0)

// See if we are in the the time period (or we are not using it)
testPeriod() =>
    // Are we running as a strategy or as a Study with testPeriod restriction?
    isStrategy or testPeriodforAlerts ?
      autolen ? autolen_timePeriod :
      time >= testPeriodStart and time <= testPeriodStop ? true : false
      : true // Not a strategy or not using testPeriod so it is "always" the period
    
// Color the period (or don't)
testPeriodBackgroundColor = testPeriodBackground and testPeriod() ? #000055 : na
bgcolor(testPeriodBackgroundColor, transp=90)

//////////////////////////////////////////////////////////////////////////////////////////
// Generate Buy Sell signals, 

buy = 0
buy  := openLong  and testPeriod() ? nz(buy[1])>0?buy[1]+1  :1 : 0
sell= 0
sell := openShort and testPeriod() ? nz(sell[1])>0?sell[1]+1 :1 : 0


//////////////////////////
//* Trade State Engine *//
//////////////////////////

// Keep track of current trade state
longClose = false, longClose := nz(longClose[1],false)
shortClose = false, shortClose := nz(shortClose[1],false)
tradeState = 0, tradeState := nz(tradeState[1])
tradeState := tradeState==0 ?   buy==1 and (barstate.isconfirmed or barstate.ishistory) and isLong and not longClose and not shortClose? 1 :
                               sell==1  and (barstate.isconfirmed or barstate.ishistory) and isShort and not longClose and not shortClose? -1 : 
                          tradeState : tradeState

///////////////////////////////////////////////////////
//Handle Entry Conditions, when state changes direction.

longCondition  = false
shortCondition = false
longCondition  := change(tradeState) and tradeState==1
shortCondition := change(tradeState) and tradeState==-1
if flipTrade
    temp = longCondition
    longCondition  := shortCondition
    shortCondition := temp
//end if

// Exit on Sell signal
longExitC  = closeLong  and testPeriod() ? 1 : 0
shortExitC = closeShort and testPeriod() ? 1 : 0

// Exit condition for no SL.
longExit = change(longExitC) and longExitC==1 and tradeState==1
shortExit = change(shortExitC) and shortExitC==1 and tradeState==-1

// -- debugs
//plotchar(tradeState,"tradeState at Event",location=location.bottom, color=na)
//plotchar(longCondition, title="longCondition",color=na)
//plotchar(shortCondition, title="shortCondition",color=na)
//plotchar(tradeState, title="tradeState",color=na)
// -- /debugs

/////////////////////////////////////
//======[ Deal Entry Prices ]======//
/////////////////////////////////////

last_open_longCondition = na
last_open_shortCondition = na
last_open_longCondition := longCondition ? close : nz(last_open_longCondition[1])
last_open_shortCondition := shortCondition ? close : nz(last_open_shortCondition[1])

//////////////////////////////////
//======[ Position State ]======//
//////////////////////////////////

in_longCondition  = tradeState == 1 
in_shortCondition = tradeState == -1

/////////////////////////////////
//======[ Trailing Stop ]======//
/////////////////////////////////

isTS = input(false, "Trailing Stop")
ts = input(3.0, "Trailing Stop (%)", minval=0,step=0.1, type=float) /100

last_high = na
last_low = na
last_high_short = na
last_low_long = na
last_high := not in_longCondition ? na : in_longCondition and (na(last_high[1]) or high_ > nz(last_high[1])) ? high_ : nz(last_high[1])
last_high_short := not in_shortCondition ? na : in_shortCondition and (na(last_high[1]) or high_ > nz(last_high[1])) ? high_ : nz(last_high[1])
last_low := not in_shortCondition ? na : in_shortCondition and (na(last_low[1]) or low_ < nz(last_low[1])) ? low_ : nz(last_low[1])
last_low_long := not in_longCondition ? na : in_longCondition and (na(last_low[1]) or low_ < nz(last_low[1])) ? low_ : nz(last_low[1])

long_ts =  isTS and in_longCondition and not na(last_high) and (low_ <= last_high - last_high * ts) //and (last_high >= last_open_longCondition + last_open_longCondition * tsi)
short_ts = isTS and in_shortCondition and not na(last_low) and (high_ >= last_low + last_low * ts) //and (last_low <= last_open_shortCondition - last_open_shortCondition * tsi)


///////////////////////////////
//======[ Take Profit ]======//
///////////////////////////////

isTP = input(false, "Take Profit")
tp = input(3.0, "Take Profit (%)",minval=0,step=0.1,type=float) / 100
ttp = input(1.0, "Trailing Profit (%)",minval=0,step=0.1,type=float) / 100
ttp := ttp>tp ? tp : ttp

long_tp =  isTP and in_longCondition  and (last_high >= last_open_longCondition + last_open_longCondition * tp)   and (low_ <= last_high - last_high * ttp)
short_tp = isTP and in_shortCondition and (last_low <= last_open_shortCondition - last_open_shortCondition * tp) and (high_ >= last_low + last_low * ttp)

/////////////////////////////
//======[ Stop Loss ]======//
/////////////////////////////

isSL = input(false, "Stop Loss")
sl = input(3.0, "Stop Loss (%)", minval=0,step=0.1, type=float) / 100
long_sl =  isSL and in_longCondition and (low_ <= last_open_longCondition - last_open_longCondition * sl)
short_sl = isSL and in_shortCondition and (high_ >= last_open_shortCondition + last_open_shortCondition * sl)

////////////////////////////////////
//======[ Stop on Opposite ]======//
////////////////////////////////////
// fastExit is superced by the design of specifying Open and Close setting in strategy
long_sos = (fastExit or (not isTS and not isSL)) and longExit and in_longCondition
short_sos = (fastExit or (not isTS and not isSL)) and shortExit and in_shortCondition 


/////////////////////////////////
//======[ Close Signals ]======//
/////////////////////////////////

// Create a single close for all the different closing conditions, all conditions here are non-repainting
longClose :=  isLong and (long_tp or long_sl or long_ts or long_sos) and not longCondition
shortClose := isShort and (short_tp or short_sl or short_ts or short_sos) and not shortCondition

///////////////////////////////
//======[ Plot Colors ]======//
///////////////////////////////

longCloseCol = na
shortCloseCol = na
longCloseCol := long_tp ? green : long_sl ? maroon : long_ts ? purple : long_sos ? orange :longCloseCol[1]
shortCloseCol := short_tp ? green : short_sl ? maroon : short_ts ? purple : short_sos ? orange : shortCloseCol[1]
//
tpColor = isTP and in_longCondition ? lime : isTP and in_shortCondition ? lime : na
slColor = isSL and in_longCondition ? red : isSL and in_shortCondition ? red : na


//////////////////////////////////
//======[ Strategy Plots ]======//
//////////////////////////////////

plot(isTS and in_longCondition?
     last_high - last_high * ts : na, "Long Trailing", fuchsia, style=2, linewidth=2,offset=1)
plot(isTP and in_longCondition and last_high < last_open_longCondition + last_open_longCondition * tp ? 
     last_open_longCondition + last_open_longCondition * tp : na, "Long TP Active", tpColor, style=3,join=false, linewidth=2,offset=1)
plot(isTP and in_longCondition and last_high >= last_open_longCondition +  last_open_longCondition * tp ? 
     last_high - last_high * ttp : na, "Long Trailing", black, style=2, linewidth=2,offset=1)
plot(isSL and in_longCondition and last_low_long > last_open_longCondition - last_open_longCondition * sl ? 
     last_open_longCondition - last_open_longCondition * sl : na, "Long SL", slColor, style=3,join=false, linewidth=2,offset=1)
//
plot(isTS and in_shortCondition?
     last_low + last_low * ts : na, "Short Trailing", fuchsia, style=2, linewidth=2,offset=1)
plot(isTP and in_shortCondition and last_low > last_open_shortCondition - last_open_shortCondition * tp ? 
     last_open_shortCondition - last_open_shortCondition * tp : na, "Short TP Active", tpColor, style=3,join=false, linewidth=2,offset=1)
plot(isTP and in_shortCondition and last_low <= last_open_shortCondition -  last_open_shortCondition * tp ? 
     last_low + last_low * ttp : na, "Short Trailing", black, style=2, linewidth=2,offset=1)
plot(isSL and in_shortCondition and last_high_short < last_open_shortCondition + last_open_shortCondition * sl ? 
     last_open_shortCondition + last_open_shortCondition * sl : na, "Short SL", slColor, style=3,join=false, linewidth=2,offset=1)
//
bclr = not clrBars ? na : tradeState==0 ? GRAY : 
                          in_longCondition ? close<last_open_longCondition? DARKGREEN : LIME :
                          in_shortCondition ? close>last_open_shortCondition? DARKRED : RED : GRAY
barcolor(bclr,title="Trade State Bar Colouring")


///////////////////////////////
//======[ Alert Plots ]======//
///////////////////////////////

plotshape(longCondition and isStudy?close:na, title="Long", color=green, textcolor=green, transp=0, 
          style=shape.triangleup, location=location.belowbar, size=size.small,text="LONG",offset=0)
plotshape(longClose and isStudy?close:na, title="Long Close", color=longCloseCol, textcolor=white, transp=0, 
          style=shape.labeldown, location=location.abovebar, size=size.small,text="Long\nClose",offset=0)

plotshape(shortCondition and isStudy?close:na, title="Short", color=red, textcolor=red, transp=0, 
          style=shape.triangledown, location=location.abovebar, size=size.small,text="SHORT",offset=0)
plotshape(shortClose and isStudy?close:na, title="Short Close", color=shortCloseCol, textcolor=white, transp=0, 
          style=shape.labelup, location=location.belowbar, size=size.small,text="Short\nClose",offset=0)

// Autoview alert syntax - This assumes you are trading coins BUY and SELL on Binance Exchange
// WARNING*** Only use Autoview to automate a strategy after you've sufficiently backtested and forward tested the strategy.
// You can learn more about the syntax here:
//      http://autoview.with.pink/#syntax and you can watch this video here: https://www.youtube.com/watch?v=epN5Tjinuxw

// For the opens you will want to trigger BUY orders on LONGS (eg ETHBTC) with alert option "Once Per Bar Close"
// and SELL orders on SHORTS (eg BTCUSDT)
//      b=buy q=0.001 e=binance s=ethbtc t=market  ( LONG )
// or   b=sell q=0.001 e=binance s=btcusdt t=market ( SHORT )
alertcondition(longCondition and isStudy, "Open Long", "LONG")
alertcondition(shortCondition and isStudy, "Open Short", "SHORT")

// For the closes you will want to trigger these alerts on condition with alert option "Once Per Bar"
// (NOTE: with Renko you can only use "Once Per Bar Close" option)
//      b=sell q=99% e=binance s=ethbtc t=market  ( CLOSE LONGS )
// or   b=buy q=99% e=binance s=btcusdt t=market  ( CLOSE SHORTS )
// This gets it as it happens and typically results in a better exit live than in the backtest. 
// It works really well for counteracting some market slippage
alertcondition(longClose and isStudy, "Close Longs", "CLOSE LONGS")
alertcondition(shortClose and isStudy, "Close Shorts", "CLOSE SHORTS")

////////////////////////////////////////////
//======[ Strategy Entry and Exits ]======//
////////////////////////////////////////////
if testPeriod() and isLong and isStrategy
    strategyEntry("Long", 1, longCondition)
    strategyClose("Long", longClose)

if testPeriod() and isShort and isStrategy
    strategyEntry("Short", 0, shortCondition)
    strategyClose("Short", shortClose)
    
// --- Debugs
//plotchar(longExit,title="longExit",location=location.bottom,color=na)
//plotchar(longCondition,title="longCondition",location=location.bottom,color=na)
//plotchar(in_longCondition,title="in_longCondition",location=location.bottom,color=na)
//plotchar(longClose,title="longClose",location=location.bottom,color=na,color=na)
//plotchar(buy,title="buy",location=location.bottom,color=na)
// --- /Debugs

///////////////////////////////////
//======[ Reset Variables ]======//
///////////////////////////////////

if longClose or not in_longCondition
    last_high := na
    last_high_short := na
    
if shortClose or not in_shortCondition
    last_low := na
    last_low_long := na
    
if longClose or shortClose
    tradeState := 0
    in_longCondition := false
    in_shortCondition := false

    
plotchar(tradeState,"tradeState at EOF",location=location.bottom, color=na)
// EOF
